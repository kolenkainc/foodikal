import {
  GoogleSpreadsheet,
  GoogleSpreadsheetWorksheet
} from 'google-spreadsheet';
import { JWT } from 'google-auth-library';
import type { GoogleServiceAccountCredentials } from './google-objects';
import { ItemNotFoundError } from './error-causes';

export class InventoryManagementStore {
  private document: GoogleSpreadsheet;

  constructor(
    googleServiceAccountCredentials: GoogleServiceAccountCredentials,
    googleSheetId: string
  ) {
    // Initialize auth - see https://theoephraim.github.io/node-google-spreadsheet/#/guides/authentication
    const serviceAccountAuth = new JWT({
      // env var values here are copied from service account credentials generated by google
      // see "Authentication" section in docs for more info
      email: googleServiceAccountCredentials.client_email,
      key: googleServiceAccountCredentials.private_key,
      scopes: ['https://www.googleapis.com/auth/spreadsheets']
    });
    this.document = new GoogleSpreadsheet(googleSheetId, serviceAccountAuth);
  }

  public async getFirstSheetNameAsync(): Promise<string> {
    const page = await this.document.sheetsByIndex[0];
    return page.title;
  }

  public async getLastSheetNameAsync(): Promise<string> {
    await this.document.loadInfo();
    const page =
      await this.document.sheetsByIndex[this.document.sheetCount - 1];
    return page.title;
  }

  public async addToLastSheetAsync(
    name: string,
    code: string
  ): Promise<boolean> {
    const page =
      await this.document.sheetsByIndex[this.document.sheetCount - 1];
    await page.addRow({
      name,
      code
    });
    return true;
  }

  public async getNameOfItemAsync(code: string): Promise<string> {
    const inventorySheet =
      await this.document.sheetsByIndex[this.document.sheetCount - 1];
    const allItems = await inventorySheet.getRows();
    const itemIndex = allItems.findIndex((row) => row.get('code') === code);
    if (itemIndex === -1) {
      console.error(`There is no Item with ${code} code`);
      throw new ItemNotFoundError(`There is no Item with ${code} code`);
    }
    console.log(`There is an Item with ${code} code`);
    return allItems[itemIndex].get('name');
  }

  public async getDateOfFirstListAsync(): Promise<Date> {
    await this.document.loadInfo();
    const firstPage = await this.document.sheetsByIndex[0];
    return new Date(firstPage.title);
  }

  public async startSessionAsync(): Promise<boolean> {
    await this.document.loadInfo();
    return true;
  }

  public async getSheetsCountAsync(): Promise<number> {
    return this.document.sheetCount;
  }

  public getSheetsByIndex(index: number): GoogleSpreadsheetWorksheet {
    return this.document.sheetsByIndex[index];
  }

  public async startNewMovementSheetAsync(title: string): Promise<boolean> {
    await this.document.addSheet({
      title,
      headerValues: ['code', 'item', 'departured', 'arrived'],
      index: 0
    });
    return true;
  }

  public async closeMovementAsync(): Promise<boolean> {
    console.log('Start to close the movement');
    const movementSheet = this.document.sheetsByIndex[0];
    const newTitle = movementSheet.title.replaceAll('Запланированный - ', '');
    console.log('Start to update the sheet properties');
    try {
      const status = await movementSheet.updateProperties({
        title: newTitle
      });
      console.log(status);
      console.log('Sheet properties has been updated');
      return true;
    } catch (error) {
      console.error(error);
      console.log('Sheet properties were not updated');
      return false;
    }
  }

  public async addItemToDeparturesAsync(
    code: string,
    dateTime: string
  ): Promise<string> {
    console.log(`code: ${code}, time: ${dateTime}`);
    const warehouseSheet = this.document.sheetsByIndex[this.document.sheetCount - 1];
    console.log('I got inventorySheet. Gonna to retrieve all items');
    const allItemsFromWarehouse = await warehouseSheet.getRows();
    console.log('Lets try to find the item by the code');
    const sameWarehouseItems = allItemsFromWarehouse.filter((row) => row.get('code') === code);
    if (sameWarehouseItems.length === 0) {
      console.log('Item not found in Warehouse');
      throw new ItemNotFoundError('Item not found in Warehouse');
    }
    const warehouseItem = sameWarehouseItems[0];
    console.log(`Item was found in Warehouse: ${warehouseItem.get('item')}`);
    const plannedMovement = await this.document.sheetsByIndex[0];
    const plannedMovementRows = await plannedMovement.getRows();
    const candidatesInMovement = plannedMovementRows.filter(row => row.get('code') === code);
    if (candidatesInMovement.length > 0) {
      console.log(`Item "${candidatesInMovement[0].get('name')}" was found in current movement`);
      return candidatesInMovement[0].get('name');
    }
    console.log(`Im going to add new item with code "${code}" in current movement`);
    await plannedMovement.addRow({
      code: code,
      item: warehouseItem.get('name'),
      departured: `="${dateTime}"`,
      arrived: ''
    });
    return warehouseItem.get('name');
  }

  public async addItemToArrivalsAsync(
    code: string,
    dateTime: string
  ): Promise<string> {
    console.log(`code: ${code}, time: ${dateTime}`);
    const currentSheet = this.document.sheetsByIndex[0];
    console.log('I got inventorySheet. Gonna to retrieve all items');
    const allItems = await currentSheet.getRows();
    console.log('Lets try to find the item by the code');
    const existentItems = allItems.filter((row) => row.get('code') === code);
    if (existentItems.length > 1) {
      return existentItems[0].get('name');
    }
    if (existentItems.length === 0) {
      console.log('Item was not found');
      throw new ItemNotFoundError('Item was not found');
    }
    const item = existentItems[0];
    console.log(`Item was found: ${item.get('item')}`);
    console.log('Im going to add the row');
    item.set('arrived', `="${dateTime}"`);
    await item.save();
    return item.get('name');
  }
}
